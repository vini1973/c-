using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Exercicio.Model;
using Smart.Database;
using System.Data.Common;

namespace Exercicio.DAL
{
    public class EstadoDAL : Smart.Model.DataAccessObject
    {
        #region Automaticaly generated by Smart.AutoModeling 2.0
        public EstadoDAL(DbConn pDbHnd) : base(pDbHnd) { }

        public EstadoInfo Get(Int32 pCdEstado)
        {
            DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@cdEstado", pCdEstado));
            String sql = "SELECT cd_estado, uf_estado FROM ESTADO WHERE cd_estado = @cdEstado";
            DbDataReader dr = DbHnd.ExecuteReader(sql);
            try
            {
                if (dr.Read())
                {
                    EstadoInfo info = new EstadoInfo();
                    if (dr["cd_estado"] != System.DBNull.Value)
                        info.CdEstado.Value = Convert.ToInt32(dr["cd_estado"]);
                    else
                    {
                        if (info.CdEstado.AllowsNull)
                            info.CdEstado.IsNullValue = true;
                    }
                    if (dr["uf_estado"] != System.DBNull.Value)
                        info.UfEstado.Value = dr["uf_estado"].ToString();
                    else
                    {
                        if (info.UfEstado.AllowsNull)
                            info.UfEstado.IsNullValue = true;
                    }

                    return info;
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                dr.Dispose();
            }
        }

        public Int32 Inserir(EstadoInfo pInfo)
        {
            String insertCols = String.Empty;
            String insertValues = String.Empty;
            if (pInfo.UfEstado.ValueIsSet)
            {
                if (!pInfo.UfEstado.IsNullValue)
                {
                    DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@ufEstado", pInfo.UfEstado.Value));
                }
                else
                {
                    DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@ufEstado", System.DBNull.Value));
                }
                insertCols += ", " + pInfo.UfEstado.Name;
                insertValues += ", @ufEstado";
            }
            insertCols = insertCols.Substring(2, insertCols.Length - 2);
            insertValues = insertValues.Substring(2, insertValues.Length - 2);
            return DbHnd.InsertGetInt32Key("INSERT INTO ESTADO (" + insertCols + ") VALUES (" + insertValues + ")", "cd_estado");
        }

        public void Atualizar(Int32 pCdEstado, EstadoInfo pInfo)
        {
            String upVars = String.Empty;
            if (pInfo.UfEstado.ValueIsSet)
            {
                if (!pInfo.UfEstado.IsNullValue)
                {
                    DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@ufEstado", pInfo.UfEstado.Value));
                }
                else
                {
                    DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@ufEstado", System.DBNull.Value));
                }
                upVars += ", " + pInfo.UfEstado.Name + " = @ufEstado";
            }
            upVars = upVars.Substring(2, upVars.Length - 2);

            String sqlWhere = String.Empty;
            DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@cdEstado", pCdEstado));
            sqlWhere += "cd_estado = @cdEstado";
            sqlWhere = " WHERE " + sqlWhere;

            DbHnd.ExecuteNonQuery("UPDATE ESTADO SET " + upVars + sqlWhere);
        }

        public void Deletar(Int32 pCdEstado)
        {
            DbHnd.Parametros.Add(new System.Data.SqlClient.SqlParameter("@cdEstado", pCdEstado));
            DbHnd.ExecuteNonQuery("DELETE FROM ESTADO WHERE cd_estado = @cdEstado");
        }

        public List<EstadoInfo> Listar()
        {
            List<EstadoInfo> lstReturn = new List<EstadoInfo>();

            String sqlSelect = "cd_estado, uf_estado";
            String sqlFrom = "ESTADO";
            String sqlWhere = BuildFilters();
            String sqlOrderBy = BuildOrderBy();
            String sql = "SELECT " + sqlSelect + " FROM " + sqlFrom + sqlWhere + sqlOrderBy;
            using (DbDataReader dr = DbHnd.ExecuteReader(sql))
            {
                while (dr.Read())
                {
                    EstadoInfo info = new EstadoInfo();
                    if (dr["cd_estado"] != System.DBNull.Value)
                        info.CdEstado.Value = Convert.ToInt32(dr["cd_estado"]);
                    else
                    {
                        if (info.CdEstado.AllowsNull)
                            info.CdEstado.IsNullValue = true;
                    }
                    if (dr["uf_estado"] != System.DBNull.Value)
                        info.UfEstado.Value = dr["uf_estado"].ToString();
                    else
                    {
                        if (info.UfEstado.AllowsNull)
                            info.UfEstado.IsNullValue = true;
                    }
                    lstReturn.Add(info);
                }
            }
            return lstReturn;
        }

        public List<EstadoInfo> ListarPaginado()
        {
            List<EstadoInfo> lstReturn = new List<EstadoInfo>();

            String sqlSelect = "cd_estado, uf_estado";
            String sqlFrom = "ESTADO";
            String sqlWhere = BuildPagedFilters();
            String sqlOrderBy = BuildPagedOrderBy();
            String sql = new Smart.Database.SQL.Translator(DbHnd.ProviderName).MontarSqlPaginado(sqlSelect, sqlFrom, sqlWhere, sqlOrderBy, this.Filters.PageNumber, this.Filters.EntriesPerPage);
            using (DbDataReader dr = DbHnd.ExecuteReader(sql))
            {
                while (dr.Read())
                {
                    EstadoInfo info = new EstadoInfo();
                    if (dr["cd_estado"] != System.DBNull.Value)
                        info.CdEstado.Value = Convert.ToInt32(dr["cd_estado"]);
                    else
                    {
                        if (info.CdEstado.AllowsNull)
                            info.CdEstado.IsNullValue = true;
                    }
                    if (dr["uf_estado"] != System.DBNull.Value)
                        info.UfEstado.Value = dr["uf_estado"].ToString();
                    else
                    {
                        if (info.UfEstado.AllowsNull)
                            info.UfEstado.IsNullValue = true;
                    }
                    lstReturn.Add(info);
                }
            }
            return lstReturn;
        }
        #endregion
    }
}
